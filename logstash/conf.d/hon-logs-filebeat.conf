input {
  beats {
    port => 5044
    ssl => true
    #ssl_certificate_authorities => ["/etc/logstash/certs/chain1.pem","/etc/logstash/certs/client.pem"]
    ssl_certificate_authorities => ["/etc/pki/honfigurator-ca/honfigurator-root-ca.pem","/etc/logstash/certs/chain1.pem","/etc/logstash/certs/root_ca.crt","/etc/logstash/certs/honfigurator_root.crt"]
    ssl_certificate => "/etc/logstash/certs/cert1.pem"
    ssl_key => "/etc/logstash/certs/privkey1.pem"
    ssl_verify_mode => "force_peer"
  }
}
filter {
  # remove the hon password for the account
  if  [system][process][cmdline] =~ /man_masterPassword/ {
     mutate {
      gsub => [
      "[process][command_line]", "((?<=svr_password\s)([^;]*)|(?<=man_masterPassword\s)([^;]*))", "<password>",
      "[system][process][cmdline]", "((?<=svr_password\s)([^;]*)|(?<=man_masterPassword\s)([^;]*))", "<password>",
      "[process][args]", "((?<=svr_password\s)([^;]*)|(?<=man_masterPassword\s)([^;]*))", "<password>"
      ]
    }
  }
  if [system][process][cmdline] =~ /svr_password/ {
    mutate {
      gsub => [
      "[process][command_line]", "((?<=svr_password\s)([^;]*)|(?<=man_masterPassword\s)([^;]*))", "<password>",
      "[system][process][cmdline]", "((?<=svr_password\s)([^;]*)|(?<=man_masterPassword\s)([^;]*))", "<password>",
      "[process][args]", "((?<=svr_password\s)([^;]*)|(?<=man_masterPassword\s)([^;]*))", "<password>"
      ]
    }
    grok {
      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA};%{GREEDYDATA}svr_description cpu:%{DATA:[Server][CPU]},priority:%{DATA:[Server][In-Game_Priority]},cores:%{DATA:[Server][Core_Assignment]},hon_version:%{DATA:[Server][Version]},%{GREEDYDATA}honfigurator_version:%{DATA:[HoNfigurator][Version]},%{GREEDYDATA}github_branch:%{DATA:[HoNfigurator][Branch]},%{GREEDYDATA}discord_admin:%{DATA:[Server][discord_admin_id]};%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]} %{NUMBER}%{GREEDYDATA}svr_ip %{DATA:[Server][Public_IP]};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA};%{GREEDYDATA}svr_description priority:%{DATA:[Server][In-Game_Priority]},cores:%{DATA:[Server][Core_Assignment]},hon_version:%{DATA:[Server][Version]},%{GREEDYDATA}honfigurator_version:%{DATA:[HoNfigurator][Version]},%{GREEDYDATA}github_branch:%{DATA:[HoNfigurator][Branch]},%{GREEDYDATA}discord_admin:%{DATA:[Server][discord_admin_id]};%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]} %{NUMBER}%{GREEDYDATA}svr_ip %{DATA:[Server][Public_IP]};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA};%{GREEDYDATA}svr_description priority:%{DATA:[Server][In-Game_Priority]},cores:%{DATA:[Server][Core_Assignment]},%{GREEDYDATA}honfigurator_version:%{DATA:[HoNfigurator][Version]},%{GREEDYDATA}github_branch:%{DATA:[HoNfigurator][Branch]},%{GREEDYDATA}discord_admin:%{DATA:[Server][discord_admin_id]};%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]} %{NUMBER}%{GREEDYDATA}svr_ip %{DATA:[Server][Public_IP]};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA};%{GREEDYDATA}svr_description priority:%{DATA:[Server][In-Game_Priority]},cores:%{DATA:[Server][Core_Assignment]},%{GREEDYDATA}hon_version:%{DATA:[Server][Version]};%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]} %{NUMBER}%{GREEDYDATA}svr_ip %{DATA:[Server][Public_IP]};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

			match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]}%{NUMBER}%{GREEDYDATA}svr_ip %{DATA:[Server][Public_IP]};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]} %{NUMBER}%{GREEDYDATA}svr_ip %{DATA:[Server][Public_IP]};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]} %{NUMBER}%{GREEDYDATA};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}%{GREEDYDATA}svr_ip %{IP:[Server][Public_IP]}%{GREEDYDATA}$"]

			match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]}%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}svr_ip %{IP:[Server][Public_IP]}%{GREEDYDATA} %{NUMBER}%{GREEDYDATA};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]}%{GREEDYDATA}svr_ip %{IP:[Server][Public_IP]}%{GREEDYDATA} %{NUMBER}%{GREEDYDATA};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_login %{DATA:[Server][Login]}:%{GREEDYDATA}svr_slave %{DATA:[temp]};%{GREEDYDATA}svr_name %{DATA:[Server][Name]} %{NUMBER}%{GREEDYDATA};%{GREEDYDATA}svr_location %{DATA:[Server][Region]};%{GREEDYDATA}$"]

      match => ["[process][command_line]","^%{GREEDYDATA}svr_ip %{IP:[Server][Public_IP]}%{GREEDYDATA}$"]
      overwrite => [ "[Server][Name]","[Server][Region]" ]
    }
    if [temp] {
      mutate {
        add_field => { "[Server][Instance]" => "%{[Server][Name]}-%{temp}" }
      }
    }
    aggregate {
      task_id => "%{[Server][Instance]}"
      code => "map['svr_ip'] = event.get('[Server][Public_IP]');
				map['svr_name'] = event.get('[Server][Name]');
				map['svr_login'] = event.get('[Server][Login]');
				map['svr_region'] = event.get('[Server][Region]');
				map['core_assignment'] = event.get('[Server][Core_Assignment]');
				map['server_version'] = event.get('[Server][Version]');
				map['priority'] = event.get('[Server][In-Game_Priority]');"
    }
  }
  #if ![Server][In-Game_Priority] { mutate { add_field => { "[Server][In-Game_Priority]" => "realtime" }}}
	#if [Server][Launcher] == "COMPEL" or [Server][Launcher] == "CMD" { mutate { add_field => { "[Server][Core_Assignment]" => "one core/server" }}}
  if [@metadata][beat] == "filebeat" {
    # Determine different log types
		# disabled as LOG_TYPE is a provided field now
    #if [log][file][path] =~ /.+?(?=M)M.+?(?=_console.clog)/ { mutate { add_field => { "[Server][Event][Log]" => "console" }}}
    #else if [log][file][path] =~ /.+?(?=console.log)/ { mutate { add_field => { "[Server][Event][Log]" => "k2 console" }}}
    #else if [log][file][path] =~ /.+?(?=adminbot)/ { mutate { add_field => { "[Server][Event][Log]" => "honfigurator" }}}
    #else if [log][file][path] =~ /.+?(?=M)M.+?(?=.log)/ { mutate { add_field => { "[Server][Event][Log]" => "match" }}}
    #Determine the Server Instance number
    mutate { add_field => { "[Server][Event][Log]" => "%{Log_Type}" }}
    if [Server][Launcher] == "HoNfigurator" {
      grok {
        match => ["[log][file][path]",".+?(?=Hon)Hon_Server_%{NUMBER:temp}%{GREEDYDATA}"]
        match => ["[log][file][path]",".+?(?=Slave)Slave%{NUMBER:temp}%{GREEDYDATA}"]
      }
    } else {
      grok {
        match => ["[log][file][path]",".+?(?=Slave)Slave%{NUMBER:temp}%{GREEDYDATA}"]
      }
    }
    if [temp] {
      mutate {
        add_field => { "[Server][Instance]" => "%{[Server][Name]}-%{temp}" }
      }
    }
    else {
      mutate {
        add_field => { "[Server][Instance]" => "%{[Server][Name]}"}
      }
    }
		if [Server][Event][Log] == "honfigurator" {
			# old HF
			if "Initialising variables (soft)" in [message] {
				grok {
					match => ["[message]","^%{GREEDYDATA}'static_ip': '%{DATA:[HoNfigurator][Use_Static_IP]}',%{GREEDYDATA}'github_branch': '%{DATA:[HoNfigurator][Branch]}'%{GREEDYDATA}use_proxy': '%{DATA:[HoNfigurator][Proxy_Enabled]}'%{GREEDYDATA}'disable_bot': '%{DATA:[HoNfigurator][Disable_Bots]}'%{GREEDYDATA}auto_update': '%{DATA:[HoNfigurator][Auto-Update]}'%{GREEDYDATA}'bot_version': '%{DATA:[HoNfigurator][Version]}'%{GREEDYDATA}'bots_running': %{DATA:[HoNfigurator][Bots_Running]}, 'cpu': '%{DATA:[Server][CPU]}'}"]
					match => ["[message]","^%{GREEDYDATA}'static_ip': '%{DATA:[HoNfigurator][Use_Static_IP]}'%{GREEDYDATA}'public_ip': '%{DATA:[Server][Public_IP]}',%{GREEDYDATA}'github_branch': '%{DATA:[HoNfigurator][Branch]}'%{GREEDYDATA}use_proxy': '%{DATA:[HoNfigurator][Proxy_Enabled]}'%{GREEDYDATA}'disable_bot': '%{DATA:[HoNfigurator][Disable_Bots]}'%{GREEDYDATA}auto_update': '%{DATA:[HoNfigurator][Auto-Update]}'%{GREEDYDATA}'bot_version': '%{DATA:[HoNfigurator][Version]}'%{GREEDYDATA}'bots_running': %{DATA:[HoNfigurator][Bots_Running]}, 'cpu': '%{DATA:[Server][CPU]}'}"]
					match => ["[message]","^%{GREEDYDATA}'static_ip': %{DATA:[HoNfigurator][Use_Static_IP]},%{GREEDYDATA}'github_branch': '%{DATA:[HoNfigurator][Branch]}'%{GREEDYDATA}use_proxy': '%{DATA:[HoNfigurator][Proxy_Enabled]}'%{GREEDYDATA}'disable_bot': '%{DATA:[HoNfigurator][Disable_Bots]}'%{GREEDYDATA}auto_update': '%{DATA:[HoNfigurator][Auto-Update]}'%{GREEDYDATA}'bot_version': '%{DATA:[HoNfigurator][Version]}'%{GREEDYDATA}'bots_running': %{DATA:[HoNfigurator][Bots_Running]}, 'cpu': '%{DATA:[Server][CPU]}'}"]
					match => ["[message]","^%{GREEDYDATA}'static_ip': '%{DATA:[HoNfigurator][Use_Static_IP]}',%{GREEDYDATA}'github_branch': '%{DATA:[HoNfigurator][Branch]}'%{GREEDYDATA}use_proxy': '%{DATA:[HoNfigurator][Proxy_Enabled]}'%{GREEDYDATA}'disable_bot': '%{DATA:[HoNfigurator][Disable_Bots]}'%{GREEDYDATA}auto_update': '%{DATA:[HoNfigurator][Auto-Update]}'%{GREEDYDATA}'bot_version': '%{DATA:[HoNfigurator][Version]}'%{GREEDYDATA}'bots_running': %{DATA:[HoNfigurator][Bots_Running]}},'$"]
					match => ["[message]","^%{GREEDYDATA}'static_ip': '%{DATA:[HoNfigurator][Use_Static_IP]}',%{GREEDYDATA}'github_branch': '%{DATA:[HoNfigurator][Branch]}'%{GREEDYDATA}use_proxy': '%{DATA:[HoNfigurator][Proxy_Enabled]}'%{GREEDYDATA}'disable_bot': '%{DATA:[HoNfigurator][Disable_Bots]}'%{GREEDYDATA}auto_update': '%{DATA:[HoNfigurator][Auto-Update]}'%{GREEDYDATA}'bot_version': '%{DATA:[HoNfigurator][Version]}'%{GREEDYDATA}$"]
				}
				mutate {
					lowercase => ["[HoNfigurator][Use_Static_IP]",
    		 		"[HoNfigurator][Disable_Bots]",
    		 		"[HoNfigurator][Auto-Update]",
    		 		"[HoNfigurator][Proxy_Enabled]",
						"[HoNfigurator][Bots_Running]"
	  		  ]
				}
				aggregate {
					task_id => "%{[Server][Instance]}"
					code => "
						map['honfigurator_ver'] = event.get('[HoNfigurator][Version]');
		        map['honfigurator_branch'] = event.get('[HoNfigurator][Branch]');
						map['honfigurator_static_ip'] = event.get('[HoNfigurator][Use_Static_IP]');
						map['honfigurator_svr_ip'] = event.get('[Server][Public_IP]');
						map['honfigurator_proxy'] = event.get('[HoNfigurator][Proxy_Enabled]');
						map['honfigurator_disable_bot'] = event.get('[HoNfigurator][Disable_Bots]');
						map['honfigurator_auto_update'] = event.get('[HoNfigurator][Auto-Update]');
						map['honfigurator_version'] = event.get('[HoNfigurator][Version]');
						map['honfigurator_bots_running'] = event.get('[HoNfigurator][Bots_Running]');
						map['honfigurator_server_cpu'] = event.get('[Server][CPU]');
					"
				}
			}
		}
		if [Log_Type] == "honfigurator" {
  		grok {
  	  	match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{DATA:[HoNfigurator][Log_Level]} - %{DATA:[HoNfigurator][Filename]}:%{INT:[HoNfigurator][Line_Number]} - %{GREEDYDATA:[@metadata][message]}" }
	  	}
		}
		if [Log_Type] == "diagnostic" {
		  grok {
		    patterns_dir => ["/etc/logstash/patterns"]
		    match => [
		      "message", "%{TIMESTAMP:timestamp]} %{WORD:[Diagnostics][entity_tag]} %{DATA:[Diagnostics][client_name]} ip: %{IP:[Diagnostics][client_ip]} ping: %{NUMBER:[Diagnostics][ping]} reliable_sv_sent: %{NUMBER:[Diagnostics][reliable_sv_sent]} reliable_cl_ack: %{NUMBER:[Diagnostics][reliable_cl_ack]} reliable_cl_sent: %{NUMBER:[Diagnostics][reliable_cl_sent]} reliable_sv_ack: %{NUMBER:[Diagnostics][reliable_sv_ack]} unreliable_sv_sent: %{NUMBER:[Diagnostics][unreliable_sv_sent]} unreliable_cl_recv: %{NUMBER:[Diagnostics][unreliable_cl_recv]} unreliable_cl_sent: %{NUMBER:[Diagnostics][unreliable_cl_sent]} unreliable_sv_recv: %{NUMBER:[Diagnostics][unreliable_sv_recv]}",
		      "message", "%{TIMESTAMP:[timestamp]} %{WORD:[Diagnostics][entity_tag]} clients_connected: %{NUMBER:[Diagnostics][clients_connected]} average_ping: %{NUMBER:[Diagnostics][average_ping]} load_average: %{BASE10NUM:[Diagnostics][load_average]} total_long_server_frames: %{NUMBER:[Diagnostics][total_long_server_frames]}"
		    ]
		    tag_on_failure => ["diagnostic_grok_failed"]
		  }
		}
    aggregate {
      task_id => "%{[Server][Instance]}"
      code => "if map['svr_ip'] != nil
					event.set('[Server][Public_IP]',map['svr_ip']);
				end
				if map['svr_name'] != nil
					event.set('[Server][Name]',map['svr_name']);
				end
				if map['svr_login'] != nil
					event.set('[Server][Login]',map['svr_login']);
				end
				if map['svr_region'] != nil
					event.set('[Server][Region]',map['svr_region']);
				end
				if map['core_assignment'] != nil
					event.set('[Server][Core_Assignment]',map['core_assignment']);
				end
				if map['priority'] != nil
					event.set('[Server][In-Game_Priority]',map['priority']);
				end
				if map['honfigurator_static_ip'] != nil
					event.set('[HoNfigurator][Use_Static_IP]',map['honfigurator_static_ip']);
				end
				if map['honfigurator_svr_ip'] != nil and event.get('[Server][Public_IP]') == nil
					event.set('[Server][Public_IP]',map['honfigurator_svr_ip']);
				end
				if map['honfigurator_proxy'] != nil
					event.set('[HoNfigurator][Proxy_Enabled]',map['honfigurator_proxy']);
				end
				if map['honfigurator_disable_bot'] != nil
					event.set('[HoNfigurator][Disable_Bots]',map['honfigurator_disable_bot']);
				end
				if map['honfigurator_auto_update'] != nil
					event.set('[HoNfigurator][Auto-Update]',map['honfigurator_auto_update']);
				end
				if map['honfigurator_ver'] != nil
					event.set('[HoNfigurator][Version]',map['honfigurator_ver']);
				end
				if map['honfigurator_branch'] != nil
					event.set('[HoNfigurator][Branch]',map['honfigurator_branch']);
	     	end
				if map['honfigurator_server_cpu'] != nil
					event.set('[Server][CPU]',map['honfigurator_server_cpu']);
	     	end"
			add_tag => "aggregated"
    }
    # Collect the Match ID from the log file name
		if [Server][Event][Log] in ["console", "match"] {
    	grok {
    	  match => ["[log][file][path]",".+?(?=M%{NUMBER})M(?<[Match][ID]>.+?(?=_console))"]
    	  match => ["[log][file][path]",".+?(?=M%{NUMBER})M(?<[Match][ID]>.+?(?=.log))"]
    	}
		}
    if [Server][Event][Log] in ["console", "k2 console"] {
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => ["message","^\[%{HONTIME:timestamp}\](.+?(?=\[))\[%{TIME}\] %{NUMBER} \[%{TIME}\] %{GREEDYDATA:[@metadata][message]}$"]
        match => ["message","^\[%{HONTIME:timestamp}\](.+?(?=\[))\[%{TIME}\] %{GREEDYDATA:[@metadata][message]}$"]
        match => ["message","^\[%{HONTIME:timestamp}\] %{GREEDYDATA:[@metadata][message]}$"]
        tag_on_failure => ["console_generic_no_match"]
      }
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
				# commented as chat now comes from match logs only
        #match => ["message","^\[%{HONTIME}\](.+?(?=\[))\[%{TIME}\] \[%{WORD:[Match][Chat][Type]}\] %{GREEDYDATA:[Match][Player][Name]}: %{GREEDYDATA:[Match][Chat][Message]}$"]
        #match => ["message","^\[%{HONTIME}\](.+?(?=\[))\[%{TIME}\] \[%{WORD} %{NUMBER:[Match][Player][Team]}\]\[%{WORD:[Match][Chat][Type]}\] %{GREEDYDATA:[Match][Player][Name]}: %{GREEDYDATA:[Match][Chat][Message]}$"]
        tag_on_failure => ["console_chat_no_match"]
      }
      if "skipped" in [@metadata][message] {
        grok {
          match => ["[@metadata][message]","^%{GREEDYDATA}Server skipped %{NUMBER} \(%{NUMBER:[Server][Event][Skipped_Frame][Time]}%{GREEDYDATA}$"]
          tag_on_failure => ["console_skipped_frame_no_match"]
        }
        mutate { add_field => { "[Server][Event][Type]" => "Skipped server frame" }}
      }
      mutate {
        rename => {
          "[@metadata][message]" => "[message]"
        }
      }

      mutate { add_field => { "[Server][Connected]" => true } }
      mutate { add_field => { "[Server][Status]" => "Online" } }

			if [message] == "Stat submission successful" {
			  mutate {
			    add_tag => [ "stats_submitted_successful" ]
			    add_field => { "[Server][Event][Type]" => "Successful Stat Submission" }
			  }
			} else if "game server status update" in [message] {
			  mutate {
			    add_field => { "[Server][Event][Type]" => "Game server status update" }
			    add_field => { "[Server][Event][Severity]" => "OK" }
			  }
			} else if "Sent heartbeat" in [message] {
			  mutate {
			    add_field => { "[Server][Event][Type]" => "Sent heartbeat to MasterServer" }
			    add_field => { "[Server][Event][Severity]" => "OK" }
			  }
			}

			if ([Server][Launcher] == "HoNfigurator" and [Server][Event][Log] == "console") or (([Server][Launcher] == "COMPEL" or [Server][Launcher] == "CMD") and [Server][Event][Log] == "k2 console") {
			  if "Connection to chat server terminated" in [message] {
			    mutate {
			      add_field => { "[Server][Event][Type]" => "Chat server connection terminated." }
			      add_field => { "[Server][Event][Severity]" => "ERROR" }
			    }
			    aggregate {
			      task_id => "%{[Server][Instance]}"
			      code => "map['server_connected'] = false; event.set('[Server][Connected]',map['server_connected']); event.set('[Server][Status]','Offline')"
			      add_tag => "disconnected from chat server"
			    }
			  } else if "Connected to chat server." in [message] {
			    mutate {
			      add_field => { "[Server][Event][Type]" => "Connected to chat server" }
			      add_field => { "[Server][Event][Severity]" => "OK" }
			    }
			    aggregate {
			      task_id => "%{[Server][Instance]}"
			      code => "map['server_connected'] = true; event.set('[Server][Connected]',map['server_connected']); event.set('[Server][Status]','Online')"
			      add_tag => "connected to chat server"
			    }
			  } else if "Server port is unreachable" in [message] {
			    mutate {
			      add_field => { "[Server][Event][Type]" => "Game server port unavailable" }
			      add_field => { "[Server][Event][Severity]" => "ERROR" }
			    }
			    aggregate {
			      task_id => "%{[Server][Instance]}"
			      code => "map['server_connected'] = false; event.set('[Server][Connected]',map['server_connected']); event.set('[Server][Status]','Offline')"
			      add_tag => "disconnected from chat server"
			    }
			  } else if "invalid session cookie" in [message] {
			    mutate {
			      add_field => { "[Server][Event][Type]" => "Invalid session cookie" }
			      add_field => { "[Server][Event][Severity]" => "ERROR" }
			    }
			    aggregate {
			      task_id => "%{[Server][Instance]}"
			      code => "map['server_connected'] = false; event.set('[Server][Connected]',map['server_connected']); event.set('[Server][Status]','Offline')"
			      add_tag => "disconnected from masterserver"
			    }
			  } else if "New session cookie" in [message] {
			    grok {
			      match => [ "message","^New session cookie \[%{GREEDYDATA:[Server][Session_Cookie]}$"]
			    }
			    mutate {
					  add_field => { "[Server][Event][Type]" => "Obtained session cookie" }
					  add_field => { "[Server][Event][Severity]" => "OK" }
					}
					aggregate {
					  task_id => "%{[Server][Instance]}"
					  code => "map['server_connected'] = true; event.set('[Server][Connected]',map['server_connected']); event.set('[Server][Status]','Online')"
					  map_action => "update"
					  add_tag => "connected to masterserver"
					}
				} else {
					aggregate {
						task_id => "%{[Server][Instance]}"
						code => "
							if map['server_connected'] == true
								event.set('[Server][Connected]',true);
								event.set('[Server][Status]','Online');
							end
							if map['server_connected'] == false
								event.set('[Server][Connected]',false);
								event.set('[Server][Status]','Offline');
							end"
						add_tag => "server connection (%{[Server][Connected]}) update for %{[Server][Instance]}"
						timeout_task_id_field => "task_id"
						timeout_tags => ['_server_connection_agg_timeout']
						push_map_as_event_on_timeout => true
						timeout => 1200
					}
					if (![Server][Event][Severity]) {
						mutate {
							add_field => { "[Server][Event][Severity]" => "OK" }
						}
					}
				}
			}
      if [message] =~ /^Name:.*/ {
        grok {
          match => [ "message","^Name: %{GREEDYDATA:[Server][Event][Connection][Name]}"]
        }
        aggregate {
          task_id => "%{[Match][ID]}"
          code => "map['connection_from'] = event.get('[Server][Event][Connection][Name]');
									map['players_connected'] ||=0; map['players_connected'] += 1;"
        }
        mutate { add_field => { "[Server][Event][Type]" => "Player connection"}}
      } else if [message] =~ /^IP:.*/  {
        grok {
          match => [ "message","^IP: %{GREEDYDATA:[Server][Event][Connection][IP]}" ]
        }
        aggregate {
          task_id => "%{[Match][ID]}"
          code => "event.set('[Server][Event][Connection][Name]', map['connection_from'])"
        }
      } else if [message] =~ /Client.*disconnected:/ {
				aggregate {
					task_id => "%{[Match][ID]}"
					map_action => "update"
					code => "map['players_connected'] ||=0;
									map['players_connected'] += -1;
									if map['players_connected'] < 0;
										map['players_connected'] = 0;
									end"
				}
			} else if [message] =~ /Client Reconnected/ {
				aggregate {
					task_id => "%{[Match][ID]}"
					map_action => "update"
					code => "map['players_connected'] ||=0; map['players_connected'] += 1"
				}
      }
      elapsed {
        start_tag => "match_started"
        end_tag => "match_ended"
        unique_id_field => "[Match][ID]"
        timeout => "4000"
      }
      mutate { add_field => { "[Match][In_Progress]" => false } }
			# ensure playername is captured in a common field
			if [Server][Event][Connection][Name] {
				mutate { add_field => { "[Match][Player][Name]" => "%{[Server][Event][Connection][Name]}" }}
			}
      #aggregate { task_id => "%{[Match][ID]}" code => "map['in_progress'] = false" }
      if [message] == "StartMatch" or [Match][Event][Type] == "GAME_START" {
        aggregate {
          task_id => "%{[Match][ID]}"
          code => "
            map['in_progress'] = true;
            event.set('[Match][In_Progress]',map['in_progress'])"
          add_tag => "match_started"
        }
      }
      else if "EndGame" in [message] or [Match][Event][Type] == "GAME_END" {
        aggregate {
          task_id => "%{[Match][ID]}"
          code => "map['in_progress'] = false"
          map_action => "update"
          add_tag => "match_ended"
          end_of_task => true
          timeout => 5400
          timeout_tags => ["match_not_ended"]
        }
      } else {
        aggregate {
          task_id => "%{[Match][ID]}"
          code => "
          if map['in_progress'] != nil
            event.set('[Match][In_Progress]',map['in_progress']);
          end
					if map['players_connected'] != nil
						event.set('[Match][Players_Connected]',map['players_connected']);
					end"
          #map_action => "update"
        }
      }
    } else if [Server][Event][Log] == "honfigurator" {
      grok {
				match => [ "message","%{TIMESTAMP_ISO8601:@timestamp}] \[%{WORD:[HoNfigurator][Log-Level]}] \[M%{DATA:[Match][ID]}] %{GREEDYDATA:[@metadata][message]}$"]
				match => [ "message","%{TIMESTAMP_ISO8601:@timestamp}] \[%{WORD:[HoNfigurator][Log-Level]}] \[M%{DATA:[Match][ID]}] Match in progress, elapsed duration: %{DATA:HoNfigurator.Match_Duration}$"]
        match => [ "message","%{TIMESTAMP_ISO8601:@timestamp}] \[%{WORD:[HoNfigurator][Log-Level]}] %{GREEDYDATA:[@metadata][message]}$"]
        match => [ "message","^%{GREEDYDATA}$"]
      }
      mutate {
        gsub => [
          "[@metadata][message]", "(?<=svr_password': ')([^',]*)", "<password>",
          "[@metadata][message]", "(?<=token': ')([^',]*)", "<token>"
        ]
      }
    }
    # Filters for Match type logs
    #else if [log][file][path] =~ /.+?(?=M%{NUMBER}.log)/ {
    else if [Server][Event][Log] == "match" {
      grok {
        match => [ "message","^%{WORD:[Match][Event][Type]} time:%{NUMBER} player:%{NUMBER:[Match][Player][ID]} target:\"%{WORD:[Match][Chat][Type]}\" msg:\"%{GREEDYDATA:[Match][Chat][Message]}\"%{GREEDYDATA}$"]
        match => [ "message","^%{WORD:[Match][Event][Type]} player:%{NUMBER:[Match][Player][ID]} target:\"%{WORD:[Match][Chat][Type]}\" msg:\"%{GREEDYDATA:[Match][Chat][Message]}\"%{GREEDYDATA}$"]
        match => [ "message","^%{WORD:[Match][Event][Type]} %{GREEDYDATA}time:%{NUMBER:[Match][Event][Time]} %{GREEDYDATA}player:%{NUMBER:[Match][Player][ID]} %{GREEDYDATA}team:%{NUMBER:[Match][Player][Team]}%{GREEDYDATA}$"]
        match => [ "message","^%{WORD:[Match][Event][Type]} %{GREEDYDATA}player:%{NUMBER:[Match][Player][ID]} %{GREEDYDATA}team:%{NUMBER:[Match][Player][Team]}%{GREEDYDATA}$"]
        match => [ "message","^%{WORD:[Match][Event][Type]} %{GREEDYDATA}player:%{NUMBER:[Match][Player][ID]}%{GREEDYDATA}$"]
        #match => [ "message","^%{WORD:[Match][Event][Type]}%{GREEDYDATA}team:%{NUMBER:[Match][Player][Team]}%{GREEDYDATA}$"]
        match => [ "message","^%{WORD:[Match][Event][Type]}%{GREEDYDATA}$"]
        tag_on_failure => ["match_chat_no_match"]
      }
      #if [Match][Event][Type] == "KILL" {
      #  grok {
      #    match => [ "message","^%{GREEDYDATA}team:%{NUMBER:[Match][Player][Team]}%{GREEDYDATA}target:\"%{DATA:[Match][Stats][Kill][Target_Type]}_%{DATA:[Match][Stats][Kill][Target]}\" attacker:\"%{DATA:[Match][Stats][Kill][Source_Type]}_%{DATA:[Match][Stats][Kill][Source]}\"%{GREEDYDATA}$"]
      #  }
      #} else if [Match][Event][Type] == "EXP_EARNED" {
      #  grok {
      #    match => [ "message","^%{GREEDYDATA}experience:%{NUMBER:[Match][Stats][Exp_Earned]}%{GREEDYDATA}$"]
      #  }
      #} else if [Match][Event][Type] == "GOLD_EARNED" {
      #  grok {
      #    match => [ "message","^%{GREEDYDATA}gold:%{NUMBER:[Match][Stats][Gold_Earned]}%{GREEDYDATA}$"]
      #  }
      #} else if [Match][Event][Type] == "DAMAGE" {
      #  grok {
      #    patterns_dir => ["/etc/logstash/patterns"]
      #    match => [ "message","^%{GREEDYDATA}inflictor:\"%{DATA:[Match][Stats][Damage][Type]}_%{DATA}_%{DATA:[Match][Stats][Damage][Source]}\" target:\"%{DATA:[Match][Stats][Damage][Target_Type]}_%{DATA:[Match][Stats][Damage][Target]}\" damage:%{NUMBER:[Match][Stats][Damage][Dealt]}%{GREEDYDATA}$"]
      #    match => [ "message","^%{GREEDYDATA}inflictor:\"%{DATA:[Match][Stats][Damage][Type]}_%{LETTERS}%{NUMBER:[Match][Stats][Damage][Ability_Source]}\" target:\"%{DATA:[Match][Stats][Damage][Target_Type]}_%{DATA:[Match][Stats][Damage][Target]}\" damage:%{NUMBER:[Match][Stats][Damage][Dealt]}%{GREEDYDATA}$"]
      #    match => [ "message","^%{GREEDYDATA}inflictor:\"%{DATA:[Match][Stats][Damage][Type]}_%{DATA:[Match][Stats][Damage][Item_Source]}\" target:\"%{DATA:[Match][Stats][Damage][Target_Type]}_%{DATA:[Match][Stats][Damage][Target]}\" damage:%{NUMBER:[Match][Stats][Damage][Dealt]}%{GREEDYDATA}$"]
      #  }
      #  if [Match][Stats][Damage][Type] == "Hero" {
      #    mutate { replace => { "[Match][Stats][Damage][Type]" => "Melee" }}
      #    if ![Match][Stats][Damage][Source] {
      #      mutate { add_field => { "[Match][Stats][Damage][Source]" => "Attack" }}
      #    }
      #  }
      #  if [Match][Stats][Damage][Type] == "Projectile" and ![Match][Stats][Damage][Source] {
      #    mutate { add_field => { "[Match][Stats][Damage][Source]" => "Attack" } }
      #  }
      #  if [Mat ch][Stats][Damage][Type] == "Item" and ![Match][Stats][Damage][Source] {
      #    mutate { add_field => { "[Match][Stats][Damage][Source]" => "%{[Match][Stats][Damage][Item_Source]}" } }
      #  }
      #  if [Match][Stats][Damage][Type] == "Ability" and ![Match][Stats][Damage][Source] {
      #    mutate { add_field => { "[Match][Stats][Damage][Source]" => "Ability%{[Match][Stats][Damage][Ability_Source]}" } }
      #  }
      #
      #} else if [Match][Event][Type] == "INFO_SETTINGS" {
      #  grok {
      #    match => [ "message","^%{GREEDYDATA}mode:\"%{WORD:[Match][Mode]}\"%{GREEDYDATA}options:\"%{WORD:[Match][Options]}\"$"]
      #  }
      #  aggregate {
      #    task_id => "%{[Match][ID]}"
      #    code => "map['match_mode'] = event.get('[Match][Mode]')"
      #  }
      if [Match][Event][Type] == "INFO_SETTINGS" {
        grok {
          match => [ "message","^%{GREEDYDATA}mode:\"%{WORD:[Match][Mode]}\"%{GREEDYDATA}options:\"%{WORD:[Match][Options]}\"$"]
        }
        aggregate {
          task_id => "%{[Match][ID]}"
          code => "map['match_mode'] = event.get('[Match][Mode]')"
        }
			}	else if [Match][Event][Type] == "PLAYER_CONNECT" {
        grok {
          match => [ "message","^%{GREEDYDATA}name:\"%{GREEDYDATA:[Match][Player][Name]}\"%{GREEDYDATA}id:%{NUMBER:[Match][Player][Global_ID]}%{GREEDYDATA}psr:%{NUMBER:[Match][Player][PSR]}$"]
        }
        ## map the name of the player to the player # in the game. The player name is not present after the initial connect event. So this is necessary. If players DCs, and another takes their place, the records are updated.
        if [Match][Player][ID] == "0" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_0'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "1" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_1'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "2" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_2'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "3" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_3'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "4" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_4'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "5" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_5'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "6" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_6'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "7" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_7'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "8" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_8'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "9" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_9'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "10" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_10'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "11" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_11'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "12" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_12'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "13" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_13'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "14" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_14'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "15" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_15'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "16" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_16'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "17" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_17'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "18" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_18'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "19" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_19'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "20" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_20'] = event.get('[Match][Player][Name]')" }}
        if [Match][Player][ID] == "21" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_name_21'] = event.get('[Match][Player][Name]')" }}
      } else if [Match][Event][Type] == "PLAYER_CHAT" {
      } else if [Match][Event][Type] == "PLAYER_TEAM_CHANGE" {
        ## map the team of the player to each event mentioning the player. If player changes team in pre-game phase, it will remain up to date
        if [Match][Player][ID] == "0" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_0'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "1" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_1'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "2" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_2'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "3" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_3'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "4" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_4'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "5" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_5'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "6" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_6'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "7" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_7'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "8" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_8'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "9" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_9'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "10" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_10'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "11" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_11'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "12" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_12'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "13" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_13'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "14" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_14'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "15" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_15'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "16" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_16'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "17" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_17'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "18" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_18'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "19" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_19'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "20" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_20'] = event.get('[Match][Player][Team]')" }}
        if [Match][Player][ID] == "21" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_team_21'] = event.get('[Match][Player][Team]')" }}
      } else if [Match][Event][Type] in ["PLAYER_SELECT","PLAYER_SWAP"] {
        grok {
          match => [ "message","^%{GREEDYDATA}hero:\"%{DATA}_%{DATA:[Match][Player][Hero]}\"$"]
          match => [ "message","^%{GREEDYDATA}newhero:\"%{DATA}_%{DATA}:[Match][Player][Hero]}\"$"]
        }
        ## get the picked hero for each player and assign it to a variable.
        if [Match][Player][ID] == "0" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_0'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "1" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_1'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "2" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_2'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "3" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_3'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "4" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_4'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "5" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_5'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "6" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_6'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "7" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_7'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "8" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_8'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "9" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_9'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "10" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_10'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "11" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_11'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "12" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_12'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "13" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_13'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "14" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_14'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "15" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_15'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "16" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_16'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "17" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_17'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "18" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_18'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "19" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_19'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "20" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_20'] = event.get('[Match][Player][Hero]')" }}
        if [Match][Player][ID] == "21" { aggregate { task_id => "%{[Match][ID]}" code => "map['player_hero_21'] = event.get('[Match][Player][Hero]')" }}
			} else {
        mutate { add_tag => [ "not_for_index" ] }
      }
      ## set the values for the playername and the team from the aggregated values above.
      if [Match][Player][ID] == "0" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_0']); event.set('[Match][Player][Team]', map['player_team_0']); event.set('[Match][Player][Hero]', map['player_hero_0'])" }}
      if [Match][Player][ID] == "1" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_1']); event.set('[Match][Player][Team]', map['player_team_1']); event.set('[Match][Player][Hero]', map['player_hero_1'])" }}
      if [Match][Player][ID] == "2" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_2']); event.set('[Match][Player][Team]', map['player_team_2']); event.set('[Match][Player][Hero]', map['player_hero_2'])" }}
      if [Match][Player][ID] == "3" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_3']); event.set('[Match][Player][Team]', map['player_team_3']); event.set('[Match][Player][Hero]', map['player_hero_3'])" }}
      if [Match][Player][ID] == "4" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_4']); event.set('[Match][Player][Team]', map['player_team_4']); event.set('[Match][Player][Hero]', map['player_hero_4'])" }}
      if [Match][Player][ID] == "5" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_5']); event.set('[Match][Player][Team]', map['player_team_5']); event.set('[Match][Player][Hero]', map['player_hero_5'])" }}
      if [Match][Player][ID] == "6" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_6']); event.set('[Match][Player][Team]', map['player_team_6']); event.set('[Match][Player][Hero]', map['player_hero_6'])" }}
      if [Match][Player][ID] == "7" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_7']); event.set('[Match][Player][Team]', map['player_team_7']); event.set('[Match][Player][Hero]', map['player_hero_7'])" }}
      if [Match][Player][ID] == "8" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_8']); event.set('[Match][Player][Team]', map['player_team_8']); event.set('[Match][Player][Hero]', map['player_hero_8'])" }}
      if [Match][Player][ID] == "9" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_9']); event.set('[Match][Player][Team]', map['player_team_9']); event.set('[Match][Player][Hero]', map['player_hero_9'])" }}
      if [Match][Player][ID] == "10" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_10']); event.set('[Match][Player][Team]', map['player_team_10']); event.set('[Match][Player][Hero]', map['player_hero_10'])" }}
      if [Match][Player][ID] == "11" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_11']); event.set('[Match][Player][Team]', map['player_team_11']); event.set('[Match][Player][Hero]', map['player_hero_11'])" }}
      if [Match][Player][ID] == "12" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_12']); event.set('[Match][Player][Team]', map['player_team_12']); event.set('[Match][Player][Hero]', map['player_hero_12'])" }}
      if [Match][Player][ID] == "13" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_13']); event.set('[Match][Player][Team]', map['player_team_13']); event.set('[Match][Player][Hero]', map['player_hero_13'])" }}
      if [Match][Player][ID] == "14" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_14']); event.set('[Match][Player][Team]', map['player_team_14']); event.set('[Match][Player][Hero]', map['player_hero_14'])" }}
      if [Match][Player][ID] == "15" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_15']); event.set('[Match][Player][Team]', map['player_team_15']); event.set('[Match][Player][Hero]', map['player_hero_15'])" }}
      if [Match][Player][ID] == "16" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_16']); event.set('[Match][Player][Team]', map['player_team_16']); event.set('[Match][Player][Hero]', map['player_hero_16'])" }}
      if [Match][Player][ID] == "17" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_17']); event.set('[Match][Player][Team]', map['player_team_17']); event.set('[Match][Player][Hero]', map['player_hero_17'])" }}
      if [Match][Player][ID] == "18" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_18']); event.set('[Match][Player][Team]', map['player_team_18']); event.set('[Match][Player][Hero]', map['player_hero_18'])" }}
      if [Match][Player][ID] == "19" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_19']); event.set('[Match][Player][Team]', map['player_team_19']); event.set('[Match][Player][Hero]', map['player_hero_19'])" }}
      if [Match][Player][ID] == "20" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_20']); event.set('[Match][Player][Team]', map['player_team_20']); event.set('[Match][Player][Hero]', map['player_hero_20'])" }}
      if [Match][Player][ID] == "21" { aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Player][Name]', map['player_name_21']); event.set('[Match][Player][Team]', map['player_team_21']); event.set('[Match][Player][Hero]', map['player_hero_21'])" }}
      aggregate { task_id => "%{[Match][ID]}" code => "event.set('[Match][Mode]', map['match_mode'])" }

    # exempt match logs from index besides chat
    }
    if [event][timezone] {
      date {
        match => ["timestamp", "MMM dd HH:mm:ss","MMM d HH:mm:ss","yyyy-MM-dd HH:mm:ss,SSS","yyyy/dd/MM HH:mm:ss"]
        target => "@timestamp"
        timezone => "%{[event][timezone]}"
      }
    } else {
      date {
        match => ["timestamp", "MMM dd HH:mm:ss","MMM d HH:mm:ss","yyyy-MM-dd HH:mm:ss,SSS","yyyy/dd/MM HH:mm:ss"]
        target => "@timestamp"
      }
    }
  	translate {
  	  source => "[Match][Player][Team]"
  	  target => "[Match][Player][Team]"
  	  dictionary => {
  	    "0" => "No_team"
  	    "1" => "Legion"
  	    "2" => "Hellbourne"
  	  }
  	  fallback => "No_team"
  	  override => true
  	}
  	mutate {
  	  add_field => {"[server][name][lc]" => "%{[Server][Name]}"}
  	  rename => {"[@metadata][message]" => "[message]"}
  	}
  	mutate {
  	  lowercase => [
  	    "[server][name][lc]"
  	  ]
  	  uppercase => [
  	    "[Match][Chat][Type]"
  	  ]
  	  convert => {
  	    "[Server][Event][Skipped_Frame][Time]" => "integer"
  	    "[Match][In_Progress]" => "boolean"
  	    "[Server][Connected]" => "boolean"
  	    "[Match][Player][PSR]" => "float"
  	    "[Match][Stats][Damage][Dealt]" => "float"
  	    "[Match][Stats][Exp_Earned]" => "float"
  	    "[Match][Stats][Gold_Earned]" => "integer"
  	  }
  	}
  	mutate {
  	  gsub => [
  	    "[server][name][lc]", "[\"\ .]", "-",
				"[Server][Admin]","#","-"
  	  ]
  	}
	}
}
output {
  if "not_for_index" not in [tags] {
    if [@metadata][beat] == "filebeat" {
      if [Log_Type] in ["console", "match", "honfigurator", "diagnostics"] {
      	elasticsearch {
      	  hosts => ["https://hon-elk.honfigurator.app:9200","https://elastic-node1.honfigurator.app:9200","https://elastic-node2.honfigurator.app:9200"]
      	  pipeline => "geoip-info"
      	  index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{[server][name][lc]}"
      	  cacert => "/etc/logstash/certs/chain1.pem"
      	  user => "${ES_USER}"
      	  password => "${ES_PWD}"
      	  action => "create"
      	}
			}
    }
  }
}

